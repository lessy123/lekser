infinity = float('inf')

#содержит информацию о узле
class Node:
    def __init__(self, name=None,cost=infinity):
        self.name = name    #его имя
        self.connection=[]  #его связи с другими графами
        self.cost=cost      #и его стоимость пути
        self.path=""        #проделанный путь
    def new_connect_in_Node(self,connect):  #функция создает одностороннию связь с другим графом
        self.connection.append(connect)
class connected:    #класс, содержащий информацию о связи 
    def __init__(self, name1=None,cost=infinity):
#        self.from_name=name1
        self.for_name=name1 #ссылка на узел, с которым связан текущий узел
        self.cost = cost    #цена "путешествия" к нему

def new_connect(name1,name2,cost):    #соединяет двухсторонней связью узлы
    name1.new_connect_in_Node(connected(name2,cost))
    name2.new_connect_in_Node(connected(name1,cost))

def Search_graf(graf,name): #находит узел по имени
    for i in range(len(graf)):
        if graf[i].name==name:
            return i
    print("Не найдено")

def start_graf(name:Node):  #делает узел стартовым
    name.cost=0
def start_graf(graf,number):
    graf[number].cost=0


def search_for_min(graf): #ищет узел, к которому путь минимален
    min=graf[0]
    for i in graf:
        if i.cost<min.cost:
            min=i
    return min              #возвращает этот узел


def find_a_way(graf,name_start,name_finish):    #функция поиска пути. Ищет минимальный путь от name_start до name_finish
    start_graf(graf,Search_graf(graf,name_start))   #создает начальный узел
    while True:
        graf_node=search_for_min(graf)          #находит узел с минимальным значением пути
        if name_finish==graf_node.name:         #если это тот финальный узел, который искали
            graf_node.path+=name_finish        
            return graf_node                    #то это и будет минимальным результатом программы
        while graf_node.connection:          #пока узел имеет связи
            relations=graf_node.connection.pop()    #будем проходить по каждому из путей
            cost_rel=relations.cost+graf_node.cost  # и расчитывать стоимость перехеда по нему
            if cost_rel<relations.for_name.cost:    #если полученная стоимость меньше стоимости узла
                relations.for_name.cost=cost_rel    # то новая стоимость заменит ее
                relations.for_name.path=graf_node.path+graf_node.name #и покажет, по какому пути нужно пройти
        graf.remove(graf_node)              #узел в конце будет удален за ненадобность





graf = [Node("A"),Node("B"),Node("C"),
        Node("D"),Node("E"),Node("F"),
        Node("G"),Node("H"),Node("I"),
        Node("J")]
new_connect(graf[0],graf[1],3)
new_connect(graf[0],graf[2],4)
new_connect(graf[0],graf[3],2)
new_connect(graf[1],graf[4],3)
new_connect(graf[2],graf[4],6)
new_connect(graf[3],graf[4],3)
new_connect(graf[3],graf[5],1)
new_connect(graf[4],graf[5],1)
new_connect(graf[4],graf[6],7)
new_connect(graf[4],graf[8],8)
new_connect(graf[5],graf[6],5)
new_connect(graf[5],graf[7],11)
new_connect(graf[6],graf[9],12)
new_connect(graf[7],graf[8],6)
new_connect(graf[7],graf[9],12)
new_connect(graf[8],graf[9],2)

finish=find_a_way(graf,"A","J")
print("Путь:",finish.path)
print("Стоимость пути:",finish.cost)
